// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: tag.sql

package db

import (
	"context"
)

const addTagToCache = `-- name: AddTagToCache :one
INSERT INTO cache_tags (
  cache_id,
  tag_id
) VALUES (
  $1, $2
) RETURNING cache_id, tag_id
`

type AddTagToCacheParams struct {
	CacheID int64 `json:"cache_id"`
	TagID   int32 `json:"tag_id"`
}

func (q *Queries) AddTagToCache(ctx context.Context, arg AddTagToCacheParams) (CacheTag, error) {
	row := q.db.QueryRow(ctx, addTagToCache, arg.CacheID, arg.TagID)
	var i CacheTag
	err := row.Scan(&i.CacheID, &i.TagID)
	return i, err
}

const createTag = `-- name: CreateTag :one
INSERT INTO tags (
  tag_name
) VALUES (
  $1
) RETURNING tag_id, tag_name
`

func (q *Queries) CreateTag(ctx context.Context, tagName string) (Tag, error) {
	row := q.db.QueryRow(ctx, createTag, tagName)
	var i Tag
	err := row.Scan(&i.TagID, &i.TagName)
	return i, err
}

const deleteCacheTag = `-- name: DeleteCacheTag :exec
DELETE FROM cache_tags
WHERE cache_id = $1
`

func (q *Queries) DeleteCacheTag(ctx context.Context, cacheID int64) error {
	_, err := q.db.Exec(ctx, deleteCacheTag, cacheID)
	return err
}

const deleteTagFromCacheTagsTable = `-- name: DeleteTagFromCacheTagsTable :exec
DELETE FROM cache_tags 
WHERE tag_id = $1
`

func (q *Queries) DeleteTagFromCacheTagsTable(ctx context.Context, tagID int32) error {
	_, err := q.db.Exec(ctx, deleteTagFromCacheTagsTable, tagID)
	return err
}

const deleteTagFromTagsTable = `-- name: DeleteTagFromTagsTable :exec
DELETE FROM tags
WHERE tag_id = $1
`

func (q *Queries) DeleteTagFromTagsTable(ctx context.Context, tagID int32) error {
	_, err := q.db.Exec(ctx, deleteTagFromTagsTable, tagID)
	return err
}

const deleteTagFromUserTagsTable = `-- name: DeleteTagFromUserTagsTable :exec
DELETE FROM user_tags 
WHERE tag_id = $1
`

func (q *Queries) DeleteTagFromUserTagsTable(ctx context.Context, tagID int32) error {
	_, err := q.db.Exec(ctx, deleteTagFromUserTagsTable, tagID)
	return err
}

const listCacheTags = `-- name: ListCacheTags :many
SELECT t.tag_id, t.tag_name
FROM cache_tags ct
JOIN tags t ON ct.tag_id = t.tag_id
WHERE ct.cache_id =$1
`

func (q *Queries) ListCacheTags(ctx context.Context, cacheID int64) ([]Tag, error) {
	rows, err := q.db.Query(ctx, listCacheTags, cacheID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.TagID, &i.TagName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT tag_id, tag_name FROM tags
`

func (q *Queries) ListTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.Query(ctx, listTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.TagID, &i.TagName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserSubscriptions = `-- name: ListUserSubscriptions :many
SELECT t.tag_id, t.tag_name
FROM user_tags ut
JOIN tags t ON ut.tag_id = t.tag_id
WHERE ut.user_id =$1
`

func (q *Queries) ListUserSubscriptions(ctx context.Context, userID string) ([]Tag, error) {
	rows, err := q.db.Query(ctx, listUserSubscriptions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.TagID, &i.TagName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const subscribeTag = `-- name: SubscribeTag :one
INSERT INTO user_tags (
  user_id,
  tag_id
) VALUES (
  $1, $2
) RETURNING user_id, tag_id
`

type SubscribeTagParams struct {
	UserID string `json:"user_id"`
	TagID  int32  `json:"tag_id"`
}

func (q *Queries) SubscribeTag(ctx context.Context, arg SubscribeTagParams) (UserTag, error) {
	row := q.db.QueryRow(ctx, subscribeTag, arg.UserID, arg.TagID)
	var i UserTag
	err := row.Scan(&i.UserID, &i.TagID)
	return i, err
}

const unsubscribeTag = `-- name: UnsubscribeTag :exec
DELETE FROM user_tags
WHERE user_id = $1 AND tag_id = $2
`

type UnsubscribeTagParams struct {
	UserID string `json:"user_id"`
	TagID  int32  `json:"tag_id"`
}

func (q *Queries) UnsubscribeTag(ctx context.Context, arg UnsubscribeTagParams) error {
	_, err := q.db.Exec(ctx, unsubscribeTag, arg.UserID, arg.TagID)
	return err
}

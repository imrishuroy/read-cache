// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: cache.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCache = `-- name: CreateCache :one
INSERT INTO caches (
  owner,
  title, 
  content,
  is_public
) VALUES (
  $1, $2, $3, $4
) RETURNING id, owner, title, content, created_at, is_public
`

type CreateCacheParams struct {
	Owner    string      `json:"owner"`
	Title    string      `json:"title"`
	Content  string      `json:"content"`
	IsPublic pgtype.Bool `json:"is_public"`
}

func (q *Queries) CreateCache(ctx context.Context, arg CreateCacheParams) (Cache, error) {
	row := q.db.QueryRow(ctx, createCache,
		arg.Owner,
		arg.Title,
		arg.Content,
		arg.IsPublic,
	)
	var i Cache
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.IsPublic,
	)
	return i, err
}

const deleteCache = `-- name: DeleteCache :exec
DELETE FROM caches
WHERE id = $1
`

func (q *Queries) DeleteCache(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCache, id)
	return err
}

const getCache = `-- name: GetCache :one
SELECT id, owner, title, content, created_at, is_public FROM caches
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCache(ctx context.Context, id int64) (Cache, error) {
	row := q.db.QueryRow(ctx, getCache, id)
	var i Cache
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.IsPublic,
	)
	return i, err
}

const listCaches = `-- name: ListCaches :many
SELECT id, owner, title, content, created_at, is_public FROM caches
WHERE owner =$1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type ListCachesParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListCaches(ctx context.Context, arg ListCachesParams) ([]Cache, error) {
	rows, err := q.db.Query(ctx, listCaches, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cache{}
	for rows.Next() {
		var i Cache
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.IsPublic,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPublicCaches = `-- name: ListPublicCaches :many
SELECT c.id, c.owner, c.title, c.content, c.created_at, c.is_public
FROM caches c
WHERE c.is_public = TRUE
LIMIT $1
OFFSET $2
`

type ListPublicCachesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPublicCaches(ctx context.Context, arg ListPublicCachesParams) ([]Cache, error) {
	rows, err := q.db.Query(ctx, listPublicCaches, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cache{}
	for rows.Next() {
		var i Cache
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.IsPublic,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPublicCachesByTags = `-- name: ListPublicCachesByTags :many
SELECT c.id, c.owner, c.title, c.content, c.created_at, c.is_public
FROM caches c
JOIN cache_tags ct ON c.id = ct.cache_id
JOIN tags t ON ct.tag_id = t.tag_id
WHERE c.is_public = TRUE
AND t.tag_id = ANY($3::int[])
LIMIT $1
OFFSET $2
`

type ListPublicCachesByTagsParams struct {
	Limit  int32   `json:"limit"`
	Offset int32   `json:"offset"`
	TagIds []int32 `json:"tag_ids"`
}

func (q *Queries) ListPublicCachesByTags(ctx context.Context, arg ListPublicCachesByTagsParams) ([]Cache, error) {
	rows, err := q.db.Query(ctx, listPublicCachesByTags, arg.Limit, arg.Offset, arg.TagIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cache{}
	for rows.Next() {
		var i Cache
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.IsPublic,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCache = `-- name: UpdateCache :one
UPDATE caches
SET title = $2,
    content = $3,
    is_public = $4
WHERE id = $1
RETURNING id, owner, title, content, created_at, is_public
`

type UpdateCacheParams struct {
	ID       int64       `json:"id"`
	Title    string      `json:"title"`
	Content  string      `json:"content"`
	IsPublic pgtype.Bool `json:"is_public"`
}

func (q *Queries) UpdateCache(ctx context.Context, arg UpdateCacheParams) (Cache, error) {
	row := q.db.QueryRow(ctx, updateCache,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.IsPublic,
	)
	var i Cache
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.IsPublic,
	)
	return i, err
}
